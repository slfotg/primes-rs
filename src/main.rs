use std::{cmp::Reverse, collections::BinaryHeap};

use bitvec::prelude::*;
use log::debug;
use primes_rs::{MappedBitVec, WheelMapping};
use tokio::sync::{mpsc, oneshot};

const fn modulus(small_primes: &[u64]) -> u64 {
    let mut prod = 1;
    let mut i = 0;
    while i < small_primes.len() {
        prod *= small_primes[i];
        i += 1;
    }
    prod
}

const SMALL_PRIMES: [u64; 4] = [2, 3, 5, 7];
const MOD: u64 = modulus(&SMALL_PRIMES);
const RELATIVE_PRIMES_SIZE: usize = 48;
const RELATIVE_PRIMES: [u64; RELATIVE_PRIMES_SIZE] = [
    11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,
    107, 109, 113, 121, 127, 131, 137, 139, 143, 149, 151, 157, 163, 167, 169, 173, 179, 181, 187,
    191, 193, 197, 199, 209, 211,
];
#[rustfmt::skip]
const DIFFS: [[u64; RELATIVE_PRIMES_SIZE]; RELATIVE_PRIMES_SIZE] = [
    [0, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2],
    [0, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10],
    [0, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2],
    [0, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4],
    [0, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2],
    [0, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4],
    [0, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6],
    [0, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2],
    [0, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6],
    [0, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4],
    [0, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2],
    [0, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4],
    [0, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6],
    [0, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6],
    [0, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2],
    [0, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6],
    [0, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4],
    [0, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2],
    [0, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6],
    [0, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4],
    [0, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6],
    [0, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8],
    [0, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4],
    [0, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2],
    [0, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4],
    [0, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2],
    [0, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4],
    [0, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8],
    [0, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6],
    [0, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4],
    [0, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6],
    [0, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2],
    [0, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4],
    [0, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6],
    [0, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2],
    [0, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6],
    [0, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6],
    [0, 4, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4],
    [0, 6, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2],
    [0, 2, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4],
    [0, 6, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6],
    [0, 4, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2],
    [0, 2, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6],
    [0, 4, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4],
    [0, 2, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2],
    [0, 10, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4],
    [0, 2, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2],
    [0, 10, 2, 4, 2, 4, 6, 2, 6, 4, 2, 4, 6, 6, 2, 6, 4, 2, 6, 4, 6, 8, 4, 2, 4, 2, 4, 8, 6, 4, 6, 2, 4, 6, 2, 6, 6, 4, 2, 4, 6, 2, 6, 4, 2, 4, 2, 10],
];

#[rustfmt::skip]
const MULTIPLICATION_TABLE: [[usize; RELATIVE_PRIMES_SIZE]; RELATIVE_PRIMES_SIZE] = [
    [26, 31, 41, 46, 9, 24, 28, 44, 6, 11, 20, 35, 3, 8, 23, 33, 38, 5, 16, 30, 2, 13, 18, 27, 32, 43, 15, 29, 40, 7, 12, 22, 37, 42, 10, 25, 34, 39, 1, 17, 21, 36, 47, 4, 14, 19, 45, 0],
    [37, 0, 7, 19, 36, 43, 13, 25, 30, 42, 12, 29, 35, 6, 18, 24, 41, 5, 23, 47, 11, 17, 28, 34, 46, 22, 40, 4, 21, 27, 39, 10, 16, 33, 3, 15, 20, 32, 2, 9, 26, 38, 45, 8, 14, 44, 1, 31],
    [17, 25, 40, 16, 23, 46, 14, 21, 37, 13, 35, 44, 19, 34, 42, 18, 33, 9, 39, 7, 15, 30, 38, 6, 36, 12, 27, 3, 11, 26, 1, 10, 32, 8, 24, 31, 47, 22, 29, 5, 20, 28, 45, 4, 43, 2, 41, 0],
    [33, 2, 28, 37, 16, 32, 41, 11, 36, 15, 24, 1, 19, 27, 6, 23, 0, 35, 5, 14, 31, 40, 10, 45, 22, 39, 18, 26, 44, 21, 30, 9, 34, 4, 13, 29, 8, 17, 43, 12, 20, 38, 47, 42, 3, 46, 7, 25],
    [24, 7, 18, 0, 22, 32, 6, 37, 20, 31, 15, 35, 46, 29, 3, 34, 28, 1, 12, 33, 44, 17, 11, 42, 16, 47, 10, 30, 14, 25, 8, 39, 13, 23, 45, 27, 38, 21, 43, 5, 26, 36, 41, 4, 9, 19, 40, 2],
    [47, 12, 4, 30, 44, 22, 14, 6, 19, 11, 37, 2, 42, 20, 13, 18, 45, 10, 35, 0, 27, 32, 25, 3, 43, 8, 34, 26, 39, 31, 23, 1, 15, 41, 33, 46, 38, 17, 29, 9, 21, 40, 5, 24, 36, 16, 28, 7],
    [26, 20, 0, 16, 44, 38, 32, 47, 41, 21, 35, 30, 11, 5, 14, 42, 9, 36, 3, 31, 40, 34, 15, 10, 24, 4, 46, 13, 7, 1, 29, 45, 25, 19, 33, 27, 8, 22, 2, 17, 39, 6, 28, 43, 23, 37, 18, 12],
    [24, 10, 26, 12, 15, 18, 34, 37, 23, 40, 43, 28, 31, 3, 36, 6, 39, 9, 42, 14, 17, 2, 5, 22, 8, 11, 27, 30, 33, 19, 35, 21, 25, 41, 45, 29, 47, 32, 1, 38, 7, 44, 13, 46, 16, 0, 4, 20],
    [47, 18, 7, 16, 24, 42, 2, 40, 11, 19, 9, 17, 44, 33, 4, 41, 12, 1, 28, 36, 26, 34, 5, 43, 3, 21, 29, 38, 27, 46, 35, 45, 15, 23, 13, 31, 20, 39, 37, 8, 6, 25, 14, 32, 22, 30, 0, 10],
    [37, 28, 39, 2, 22, 33, 25, 45, 7, 46, 10, 40, 31, 3, 42, 14, 5, 35, 47, 38, 0, 20, 12, 23, 43, 6, 17, 8, 27, 19, 29, 1, 13, 4, 24, 15, 34, 36, 9, 11, 30, 21, 41, 32, 44, 16, 26, 18],
    [24, 40, 9, 29, 46, 41, 15, 31, 26, 43, 32, 27, 0, 45, 18, 13, 2, 19, 14, 30, 4, 47, 16, 36, 5, 21, 17, 38, 33, 1, 23, 39, 34, 8, 3, 25, 35, 10, 20, 42, 37, 11, 6, 22, 44, 12, 7, 28],
    [17, 41, 18, 42, 43, 19, 44, 45, 20, 21, 22, 46, 47, 23, 24, 25, 0, 1, 26, 2, 3, 27, 4, 28, 5, 6, 29, 30, 7, 31, 8, 9, 32, 33, 10, 34, 11, 35, 12, 13, 36, 37, 14, 38, 15, 16, 39, 40],
    [26, 5, 38, 45, 23, 8, 14, 47, 11, 17, 44, 1, 28, 34, 46, 31, 37, 22, 0, 7, 40, 19, 4, 36, 43, 21, 27, 13, 39, 25, 30, 10, 16, 42, 33, 12, 3, 29, 35, 15, 20, 6, 32, 18, 24, 2, 9, 41],
    [33, 20, 28, 9, 45, 4, 39, 7, 15, 43, 2, 30, 38, 6, 41, 0, 36, 17, 25, 12, 40, 27, 16, 23, 3, 11, 46, 26, 14, 21, 1, 10, 37, 32, 13, 8, 35, 44, 24, 31, 19, 47, 34, 42, 22, 29, 18, 5],
    [17, 29, 13, 9, 21, 18, 45, 10, 40, 5, 35, 0, 27, 24, 36, 32, 16, 28, 25, 7, 3, 47, 12, 43, 8, 4, 34, 30, 44, 26, 39, 22, 31, 14, 23, 6, 19, 1, 15, 11, 41, 37, 2, 33, 46, 42, 38, 20],
    [47, 31, 32, 1, 3, 36, 6, 38, 7, 39, 9, 42, 44, 13, 14, 46, 16, 17, 0, 2, 4, 20, 5, 22, 24, 8, 10, 26, 11, 27, 12, 30, 15, 33, 18, 34, 19, 35, 37, 21, 23, 40, 25, 41, 43, 45, 28, 29],
    [17, 20, 39, 44, 33, 4, 37, 8, 41, 12, 1, 6, 25, 28, 14, 32, 36, 22, 26, 30, 0, 34, 5, 10, 43, 47, 18, 3, 21, 7, 29, 16, 38, 24, 42, 27, 46, 2, 35, 40, 11, 45, 15, 19, 23, 9, 13, 31],
    [33, 10, 21, 22, 46, 34, 11, 47, 23, 24, 35, 12, 25, 13, 36, 0, 37, 1, 14, 38, 26, 2, 15, 3, 16, 39, 27, 4, 40, 28, 17, 5, 41, 18, 6, 29, 42, 30, 43, 19, 7, 31, 44, 8, 45, 9, 32, 20],
    [37, 7, 15, 43, 32, 13, 2, 30, 38, 8, 35, 6, 44, 24, 41, 31, 0, 19, 47, 36, 17, 34, 25, 42, 22, 12, 40, 29, 27, 18, 16, 5, 33, 23, 3, 20, 11, 28, 9, 46, 26, 45, 14, 4, 21, 1, 39, 10],
    [33, 4, 37, 29, 16, 8, 41, 12, 38, 24, 1, 42, 27, 6, 46, 25, 2, 35, 28, 14, 40, 32, 11, 45, 36, 22, 15, 26, 19, 30, 23, 9, 0, 34, 13, 5, 31, 17, 10, 43, 20, 47, 39, 18, 3, 44, 21, 7],
    [37, 29, 26, 19, 16, 8, 41, 30, 23, 12, 9, 0, 38, 34, 24, 13, 5, 1, 42, 31, 27, 17, 10, 6, 46, 43, 25, 20, 2, 47, 39, 35, 28, 18, 14, 3, 44, 40, 32, 21, 11, 7, 45, 36, 33, 22, 15, 4],
    [26, 25, 20, 19, 16, 8, 2, 47, 41, 39, 35, 30, 28, 23, 18, 14, 12, 9, 3, 0, 44, 40, 38, 34, 32, 24, 21, 13, 11, 7, 5, 1, 45, 42, 36, 33, 31, 27, 22, 17, 15, 10, 6, 4, 46, 43, 37, 29],
    [24, 21, 20, 19, 16, 13, 11, 8, 7, 5, 2, 1, 47, 45, 42, 41, 39, 36, 35, 33, 31, 30, 28, 27, 23, 22, 18, 17, 15, 14, 12, 10, 9, 6, 4, 3, 0, 46, 44, 43, 40, 38, 37, 34, 32, 29, 26, 25],
    [24, 25, 26, 29, 32, 34, 37, 38, 40, 43, 44, 46, 0, 3, 4, 6, 9, 10, 12, 14, 15, 17, 18, 22, 23, 27, 28, 30, 31, 33, 35, 36, 39, 41, 42, 45, 47, 1, 2, 5, 7, 8, 11, 13, 16, 19, 20, 21],
    [26, 29, 37, 43, 46, 4, 6, 10, 15, 17, 22, 27, 31, 33, 36, 42, 45, 1, 5, 7, 11, 13, 21, 24, 32, 34, 38, 40, 44, 0, 3, 9, 12, 14, 18, 23, 28, 30, 35, 39, 41, 47, 2, 8, 16, 19, 20, 25],
    [37, 4, 15, 22, 33, 36, 45, 7, 11, 21, 32, 40, 44, 3, 14, 18, 28, 35, 39, 47, 2, 20, 25, 43, 46, 6, 10, 17, 27, 31, 42, 1, 5, 13, 24, 34, 38, 0, 9, 12, 23, 30, 41, 8, 16, 19, 26, 29],
    [33, 7, 21, 44, 3, 18, 39, 47, 20, 43, 10, 17, 31, 5, 13, 34, 0, 9, 23, 30, 19, 26, 15, 22, 36, 45, 11, 32, 40, 14, 28, 35, 2, 25, 46, 6, 27, 42, 1, 24, 38, 12, 41, 8, 16, 29, 37, 4],
    [37, 10, 39, 1, 21, 4, 14, 45, 26, 46, 9, 28, 11, 20, 3, 23, 33, 5, 16, 18, 27, 29, 40, 12, 22, 42, 25, 34, 17, 36, 47, 19, 0, 31, 41, 24, 44, 6, 35, 8, 38, 30, 2, 13, 32, 43, 15, 7],
    [33, 20, 32, 9, 45, 8, 44, 31, 7, 19, 43, 30, 42, 29, 6, 18, 41, 5, 17, 28, 40, 4, 27, 39, 16, 3, 15, 2, 26, 38, 14, 1, 37, 0, 36, 13, 25, 12, 35, 24, 23, 47, 11, 34, 46, 22, 21, 10],
    [17, 31, 13, 9, 23, 19, 15, 45, 11, 40, 35, 2, 46, 27, 42, 24, 38, 16, 29, 7, 21, 3, 18, 47, 43, 10, 5, 34, 0, 30, 26, 22, 36, 32, 14, 28, 25, 6, 1, 12, 41, 8, 37, 4, 33, 44, 39, 20],
    [47, 29, 28, 45, 43, 41, 25, 40, 23, 21, 37, 35, 19, 34, 18, 33, 15, 30, 12, 27, 11, 26, 10, 8, 24, 22, 5, 20, 4, 2, 0, 17, 16, 46, 14, 13, 44, 42, 9, 39, 7, 38, 6, 36, 3, 1, 32, 31],
    [17, 20, 38, 42, 46, 33, 2, 37, 41, 11, 15, 1, 19, 6, 23, 14, 31, 22, 39, 26, 44, 30, 34, 4, 8, 43, 12, 47, 3, 7, 25, 28, 16, 32, 36, 24, 27, 0, 35, 5, 40, 10, 45, 18, 21, 9, 13, 29],
    [33, 5, 18, 29, 22, 42, 34, 47, 19, 31, 24, 44, 35, 8, 13, 32, 37, 10, 1, 21, 14, 26, 46, 11, 3, 23, 16, 27, 40, 12, 25, 17, 36, 0, 41, 6, 38, 30, 2, 43, 15, 7, 39, 4, 45, 9, 28, 20],
    [26, 41, 9, 2, 24, 18, 32, 6, 20, 15, 35, 29, 3, 12, 33, 42, 16, 10, 30, 25, 39, 13, 27, 21, 43, 36, 4, 19, 40, 7, 0, 22, 37, 31, 46, 34, 28, 1, 44, 17, 11, 47, 14, 8, 23, 45, 38, 5],
    [17, 40, 39, 16, 15, 38, 14, 37, 36, 13, 12, 35, 11, 34, 10, 33, 32, 9, 8, 31, 7, 30, 29, 6, 5, 28, 4, 27, 3, 2, 26, 1, 0, 25, 24, 23, 47, 46, 22, 21, 20, 45, 44, 19, 43, 42, 18, 41],
    [24, 28, 7, 12, 44, 22, 6, 11, 37, 42, 20, 10, 35, 25, 3, 8, 34, 39, 23, 1, 33, 38, 17, 21, 5, 36, 16, 47, 4, 30, 14, 19, 2, 13, 18, 45, 0, 27, 32, 43, 26, 31, 15, 41, 46, 29, 9, 40],
    [37, 18, 26, 16, 44, 32, 41, 21, 30, 11, 9, 36, 34, 15, 24, 4, 13, 1, 29, 19, 27, 8, 17, 6, 43, 23, 12, 20, 0, 38, 47, 35, 5, 14, 42, 3, 31, 40, 10, 46, 7, 45, 25, 33, 22, 2, 39, 28],
    [47, 10, 0, 30, 22, 32, 14, 25, 6, 8, 37, 39, 20, 31, 13, 23, 15, 45, 35, 46, 27, 38, 29, 21, 3, 43, 5, 34, 26, 36, 28, 1, 12, 41, 4, 33, 44, 17, 9, 19, 11, 40, 2, 42, 24, 16, 7, 18],
    [24, 20, 4, 0, 16, 46, 13, 44, 7, 38, 1, 32, 47, 29, 45, 41, 25, 21, 35, 19, 33, 30, 27, 11, 8, 22, 5, 2, 17, 14, 42, 9, 39, 6, 36, 3, 31, 28, 43, 40, 23, 37, 34, 18, 15, 12, 26, 10],
    [26, 12, 18, 37, 23, 43, 28, 6, 39, 17, 2, 22, 8, 27, 33, 19, 25, 45, 29, 1, 7, 13, 46, 4, 24, 10, 15, 34, 40, 31, 3, 36, 9, 42, 14, 5, 11, 30, 35, 21, 41, 47, 32, 38, 44, 16, 0, 20],
    [47, 7, 28, 16, 36, 24, 5, 40, 21, 9, 29, 17, 38, 46, 33, 41, 15, 1, 23, 31, 39, 26, 34, 8, 43, 3, 25, 32, 27, 0, 35, 10, 45, 18, 13, 20, 42, 2, 37, 11, 19, 6, 14, 22, 44, 30, 4, 12],
    [24, 2, 40, 19, 9, 4, 41, 36, 26, 5, 43, 21, 38, 27, 45, 23, 13, 39, 8, 25, 14, 30, 10, 47, 16, 42, 11, 17, 44, 33, 12, 1, 28, 34, 3, 29, 46, 35, 15, 31, 20, 37, 6, 32, 22, 0, 18, 7],
    [33, 25, 7, 46, 3, 42, 47, 38, 20, 12, 43, 17, 8, 29, 13, 4, 34, 9, 30, 21, 44, 26, 18, 39, 22, 45, 10, 40, 31, 14, 5, 35, 0, 23, 6, 27, 19, 1, 24, 15, 36, 11, 41, 32, 16, 37, 28, 2],
    [17, 0, 41, 2, 43, 4, 45, 28, 20, 5, 29, 22, 47, 31, 24, 8, 32, 10, 1, 26, 11, 3, 27, 12, 36, 6, 38, 30, 15, 7, 39, 9, 33, 18, 42, 34, 19, 44, 35, 13, 37, 21, 14, 46, 23, 16, 40, 25],
    [37, 31, 1, 44, 14, 8, 45, 38, 26, 9, 2, 32, 20, 15, 3, 33, 16, 10, 39, 27, 21, 4, 40, 22, 46, 34, 28, 17, 11, 47, 23, 5, 41, 24, 18, 6, 35, 29, 12, 42, 30, 25, 13, 43, 36, 19, 7, 0],
    [26, 0, 45, 19, 14, 4, 47, 36, 21, 17, 1, 39, 34, 25, 10, 42, 37, 22, 12, 7, 40, 29, 15, 43, 32, 27, 18, 13, 2, 30, 16, 5, 38, 33, 23, 8, 3, 35, 20, 11, 6, 44, 28, 24, 9, 46, 41, 31],
    [47, 46, 45, 44, 43, 42, 41, 40, 39, 38, 37, 36, 35, 34, 33, 32, 31, 30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0],
    [47, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46],
];

type PrimeInfo = (u64, usize, usize);
type PriorityQueue = BinaryHeap<Reverse<PrimeInfo>>;

enum Command {
    NextPrimeFrom {
        from_index: usize,
        resp: oneshot::Sender<Option<PrimeInfo>>,
    },
    Sieve {
        prime: u64,
        composite: u64,
    },
    Break {
        resp: oneshot::Sender<MappedBitVec>,
    },
}

struct SpokeManager {
    sender: mpsc::Sender<Command>,
}

impl SpokeManager {
    async fn next_prime_from(&self, from_index: usize) -> Option<PrimeInfo> {
        let (tx, rx) = oneshot::channel();
        let _ = self
            .sender
            .send(Command::NextPrimeFrom {
                from_index,
                resp: tx,
            })
            .await;
        if let Ok(result) = rx.await {
            result
        } else {
            None
        }
    }

    async fn pop_next_prime(
        managers: &[SpokeManager],
        min_queue: &mut PriorityQueue,
        max: u64,
    ) -> Option<PrimeInfo> {
        loop {
            if let Some(elem) = min_queue.pop() {
                let elem = elem.0;
                let (_, prime_index, spoke_index) = elem;

                if let Some(current_elem) = managers[spoke_index].next_prime_from(prime_index).await
                {
                    if elem == current_elem {
                        if let Some(next_elem) =
                            managers[spoke_index].next_prime_from(prime_index + 1).await
                        {
                            let p = next_elem.0;
                            if p * p < max {
                                min_queue.push(Reverse(next_elem));
                            }
                        }
                        return Some(elem);
                    } else {
                        min_queue.push(Reverse(current_elem));
                    }
                }
            } else {
                return None;
            }
        }
    }

    async fn sieve(&self, prime: u64, composite: u64) {
        let _ = self.sender.send(Command::Sieve { prime, composite }).await;
    }

    async fn get_spoke(&self) -> Result<MappedBitVec, tokio::sync::oneshot::error::RecvError> {
        let (tx, rx) = oneshot::channel();
        let _ = self.sender.send(Command::Break { resp: tx }).await;
        rx.await
    }
}

async fn manage_wheel(
    mut rx: mpsc::Receiver<Command>,
    index: usize,
    offset: u64,
    modulus: u64,
    max: u64,
) {
    let mut wheel = initialize_vec(offset, modulus, max);
    let mapping = WheelMapping::new(offset, modulus);
    while let Some(command) = rx.recv().await {
        match command {
            Command::NextPrimeFrom { from_index, resp } => {
                debug!("Calculating next prime");
                let mut next_index = from_index;
                let _ = resp.send(if let Some(first_one) = &wheel[next_index..].first_one() {
                    let p = mapping.apply(next_index + first_one);
                    next_index += first_one;
                    Some((p, next_index, index))
                } else {
                    None
                });
            }
            Command::Sieve { prime, composite } => {
                debug!("Sieving from {}", composite);
                let p_index = ((composite / modulus) - (offset / modulus)) as usize;
                for i in (p_index..wheel.len()).step_by(prime as usize) {
                    wheel.set(i, false);
                }
            }
            Command::Break { resp } => {
                debug!("Returning wheel");
                let _ = resp.send(MappedBitVec::new(wheel, mapping));
                break;
            }
        }
    }
    debug!("Finished thread {}", index);
}

fn initialize_vec(offset: u64, modulus: u64, max: u64) -> BitVec {
    let size =
        (max / modulus) - (offset / modulus) + u64::from((offset % modulus) <= max % modulus);
    bitvec!(1; size as usize)
}

#[tokio::main]
async fn main() {
    env_logger::init();
    let max = 1_000_000_000;

    let managers = RELATIVE_PRIMES
        .into_iter()
        .enumerate()
        .map(|(i, p)| {
            let (ctx, crx) = mpsc::channel(32);
            tokio::spawn(async move {
                manage_wheel(crx, i, p, MOD, max).await;
            });
            SpokeManager { sender: ctx }
        })
        .collect::<Vec<_>>();

    // Initialze min BinaryHeap
    let mut min_queue = BinaryHeap::with_capacity(RELATIVE_PRIMES_SIZE);
    for manager in managers.iter() {
        if let Some(elem) = manager.next_prime_from(0).await {
            let p = elem.0;
            if p * p < max {
                min_queue.push(Reverse(elem));
            }
        }
    }
    debug!("Queue: {:?}", min_queue);

    // Do the actually sieve
    while !min_queue.is_empty() {
        if let Some((prime, _, spoke_index)) =
            SpokeManager::pop_next_prime(&managers, &mut min_queue, max).await
        {
            let diffs = &DIFFS[spoke_index];
            let table = &MULTIPLICATION_TABLE[spoke_index];

            let mut relative_prime = prime;
            for (i, &diff) in diffs.iter().enumerate() {
                relative_prime += diff;
                let composite = prime * relative_prime;
                if composite <= max {
                    let manager = &managers[table[i]];
                    manager.sieve(prime, composite).await;
                } else {
                    break;
                }
            }
        }
    }
    let mut size = SMALL_PRIMES.len();
    for manager in managers.iter() {
        if let Ok(spoke) = manager.get_spoke().await {
            size += spoke.len();
        }
    }
    println!("Size: {}", size);
}
